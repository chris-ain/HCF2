var curtainsAg;let pl;function curtainsgenturfunc(e){function n(e,n,r){return(1-r)*e+r*n*.5}gsap.registerPlugin(ScrollTrigger);const r=[],t=document.getElementsByClassName("plane");let o=0;var a=0;const i=new Curtains({container:document.getElementById("canvastwo"),watchScroll:void 0,pixelRatio:Math.min(10,window.devicePixelRatio)});i.clear(),curtainsAg=i,i.onRender(()=>{void 0}).onScroll(()=>{const e=i.getScrollDeltas();e.y=-e.y,e.y>60?e.y=60:e.y<-60&&(e.y=-60),Math.abs(e.y)>Math.abs(a)&&(a=n(a,e.y,.5)),Math.abs(e.y)>Math.abs(o)&&(o=n(o,e.y,.5))}).onError(()=>{document.body.classList.add("no-curtainsAgentur","planes-loaded")}).onContextLost(()=>{i.restoreContext()}),i.disableDrawing(),e.on("scroll",e=>{!function(e,n){i.updateScrollValues(e,n)}(e.scroll.x,e.scroll.y),i.needRender()});document.getElementById("debug-value");t.length;const u={vertexShader:"\n  precision mediump float;\n  \n  // default mandatory variables\n  attribute vec3 aVertexPosition;\n  attribute vec2 aTextureCoord;\n  uniform mat4 uMVMatrix;\n  uniform mat4 uPMatrix;\n  uniform mat4 planeTextureMatrix;\n  // custom variables\n  varying vec3 vVertexPosition;\n  varying vec2 vTextureCoord;\n  uniform float uPlaneDeformation;\n  void main() {\n      vec3 vertexPosition = aVertexPosition;\n      // cool effect on scroll\n      vertexPosition.y += sin(((vertexPosition.x + 1.0) / 2.0) * 3.141592) * (sin(uPlaneDeformation / 200.0));\n      gl_Position = uPMatrix * uMVMatrix * vec4(vertexPosition, 1.0);\n      // varyings\n      vVertexPosition = vertexPosition;\n      vTextureCoord = (planeTextureMatrix * vec4(aTextureCoord, 0.0, 1.0)).xy;\n  }\n",fragmentShader:"\n  precision mediump float;\n  \n  varying vec3 vVertexPosition;\n  varying vec2 vTextureCoord;\n  uniform sampler2D planeTexture;\n  void main() {\n      // just display our texture\n      gl_FragColor = texture2D(planeTexture, vTextureCoord);\n  }\n",shareProgram:!0,widthSegments:10,heightSegments:10,drawCheckMargins:{top:100,right:0,bottom:100,left:0},uniforms:{planeDeformation:{name:"uPlaneDeformation",type:"1f",value:0}}};for(let e=0;e<t.length;e++){const n=new Plane(i,t[e],u);pl=n,r.push(n),l(e)}function l(e){const n=r[e];n&&n.onLoading(function(){}).onReady(function(){n.setRenderTarget(s),e===r.length-1&&document.body.classList.add("planes-loaded")}).onRender(function(){n.uniforms.planeDeformation.value=a,n.textures[0].setScale(new Vec2(1+Math.abs(o)/500))})}var s=new RenderTarget(i),c=new ShaderPass(i,{fragmentShader:"\n  precision mediump float;\n  varying vec3 vVertexPosition;\n  varying vec2 vTextureCoord;\n  uniform sampler2D uRenderTexture;\n  uniform float uScrollEffect;\n  void main() {\n      vec2 textureCoords = vTextureCoord;\n      vec2 redTextCoords = vec2(vTextureCoord.x, vTextureCoord.y - uScrollEffect / 500.0);\n      vec2 greenTextCoords = vec2(vTextureCoord.x, vTextureCoord.y - uScrollEffect / 50000.0);\n      vec2 blueTextCoords = vec2(vTextureCoord.x, vTextureCoord.y - uScrollEffect / 50000.0);\n      vec4 red = texture2D(uRenderTexture, redTextCoords);\n      vec4 green = texture2D(uRenderTexture, greenTextCoords);\n      vec4 blue = texture2D(uRenderTexture, blueTextCoords);\n      vec4 finalColor = vec4(red.r, green.g, blue.b, min(1.0, red.a * blue.a * green.a));\n      gl_FragColor = finalColor;\n  }\n",renderTarget:s,depthTest:!1,uniforms:{scrollEffect:{name:"uScrollEffect",type:"1f",value:0}}});c&&c.onRender(function(){c.uniforms.scrollEffect.value=o})}function destroyPlaneAg(){for(let e=0;e<curtainsAg.length;e++)curtainsAg[e].remove();curtainsAg=[]}export{curtainsAg,curtainsgenturfunc,destroyPlaneAg};
